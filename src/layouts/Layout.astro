---
interface Props {
  title: string;
}

interface NavLink {
  href: string;
  text: string;
}

const { title } = Astro.props;

// Enlaces de navegación
const navLinks: NavLink[] = [
  { href: "#home", text: "Home" },
  { href: "#about", text: "Who We Are" },
  { href: "#services", text: "What We Do" },
  { href: "#territory", text: "Territory We Cover" },
  { href: "#contact", text: "Contact Us" }
];
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="NCR Trucking Inc - Servicios de transporte especializados"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/webp" href="/favicon.webp" />
    <title>{title} | NCR Trucking Inc</title>
    <!-- Precargar video -->
    <link rel="preload" as="video" href="hero.mp4" type="video/mp4" />
  </head>
  <body class="min-h-screen bg-white">
    <!-- Header con navegación -->
    <header
      class="fixed top-0 left-0 right-0 z-50 bg-white/90 backdrop-blur-sm shadow-sm">
      <nav class="container mx-auto px-4 py-4">
        <div class="flex items-center justify-between">
          <!-- Logo -->
          <a href="#home" class="text-xl font-bold text-primary">
            <img src="Logo-Short.webp" alt="Logo NCR Trucking Inc." width="140" height="40" />
          </a>

          <!-- Navegación Desktop -->
          <div class="hidden md:flex items-center space-x-8">
            {navLinks.map((link) => (
              <a 
                href={link.href} 
                class="nav-link relative px-2 py-1"
                data-section={link.href.slice(1)}
              >
                {link.text}
                <span class="nav-indicator"></span>
              </a>
            ))}
          </div>

          <!-- Botón Mobile Menu -->
          <button
            id="mobile-menu-button"
            class="md:hidden text-primary p-2"
            aria-label="Menu"
            type="button">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16m-16 6h16"></path>
            </svg>
          </button>
        </div>

        <!-- Mobile Menu -->
        <div
          id="mobile-menu"
          class="hidden md:hidden absolute top-full left-0 right-0 bg-white shadow-lg">
          <div class="flex flex-col space-y-4 p-4">
            {navLinks.map((link) => (
              <a 
                href={link.href} 
                class="nav-link px-2 py-1 relative"
                data-section={link.href.slice(1)}
              >
                {link.text}
                <span class="nav-indicator"></span>
              </a>
            ))}
          </div>
        </div>
      </nav>
    </header>

    <!-- Contenido principal -->
    <main class="pt-16">
      <slot />
    </main>

    <!-- Scripts -->
    <script>
      interface NavClickEvent extends Event {
        currentTarget: HTMLAnchorElement;
      }

      // Elementos DOM
      const mobileMenuButton = document.getElementById("mobile-menu-button") as HTMLButtonElement | null;
      const mobileMenu = document.getElementById("mobile-menu") as HTMLDivElement | null;
      const navLinks = document.querySelectorAll<HTMLAnchorElement>('.nav-link');

      // Manejo del menú mobile
      mobileMenuButton?.addEventListener("click", () => {
        mobileMenu?.classList.toggle("hidden");
      });

      // Navegación suave y manejo de enlaces activos
      const handleNavClick = (e: MouseEvent) => {
        e.preventDefault();
        const target = e.currentTarget as HTMLAnchorElement;
        const sectionId = target.getAttribute('href');
        
        if (!sectionId) return;

        const element = document.querySelector(sectionId);
        
        if (element) {
          // Cerrar menú mobile si está abierto
          mobileMenu?.classList.add('hidden');
          
          // Actualizar enlace activo
          updateActiveLink(sectionId.slice(1));
          
          // Scroll suave a la sección
          element.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
        }
      };

      // Añadir event listeners a los enlaces
      navLinks.forEach(link => {
        link.addEventListener('click', handleNavClick);
      });

      // Función para actualizar el enlace activo
      const updateActiveLink = (sectionId: string) => {
        navLinks.forEach(link => {
          const linkSection = link.dataset.section;
          if (linkSection === sectionId) {
            link.classList.add('active');
          } else {
            link.classList.remove('active');
          }
        });
      };

      // Observador de secciones visibles
      const observerOptions: IntersectionObserverInit = {
        root: null,
        threshold: 0.5,
        rootMargin: '-100px 0px -100px 0px'
      };

      const sectionObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const sectionId = entry.target.id;
            updateActiveLink(sectionId);
          }
        });
      }, observerOptions);

      // Observar todas las secciones
      document.querySelectorAll<HTMLElement>('section[id]').forEach((section) => {
        sectionObserver.observe(section);
      });
    </script>

    <style is:global>
      html {
        scroll-padding-top: 5rem;
        scroll-behavior: smooth;
      }
      
      .nav-link {
        @apply text-primary hover:text-accent transition-colors duration-200 font-medium;
      }

      .nav-indicator {
        @apply absolute bottom-0 left-0 w-full h-0.5 bg-accent scale-x-0 transition-transform duration-300 origin-left;
      }

      .nav-link.active {
        @apply text-accent;
      }

      .nav-link.active .nav-indicator {
        @apply scale-x-100;
      }

      /* Animación del hover */
      .nav-link:hover .nav-indicator {
        @apply scale-x-100;
      }

      /* Estilos específicos para móvil */
      @media (max-width: 768px) {
        .nav-link {
          @apply w-full;
        }

        .nav-indicator {
          @apply h-full w-0.5 right-0 left-auto top-0;
          transform-origin: top;
        }
      }
    </style>
  </body>
</html>