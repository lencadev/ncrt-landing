---
interface Props {
  center: [number, number];
  zoom: number;
  markers: Array<{
    position: [number, number];
    title: string;
    type: 'headquarters' | 'terminal' | 'office';
  }>;
}

const { center, zoom, markers } = Astro.props;
---

<div 
  id="map" 
  class="w-full h-[400px] rounded-lg shadow-lg overflow-hidden" 
  data-props={JSON.stringify({ center, zoom, markers })}
></div>

<!-- Asegurarnos de cargar los estilos de Leaflet -->
<link 
  rel="stylesheet" 
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
  crossorigin="" 
/>

<script>
  import L from 'leaflet';

  interface MarkerData {
    position: [number, number];
    title: string;
    type: 'headquarters' | 'terminal' | 'office';
  }

  interface MapData {
    center: [number, number];
    zoom: number;
    markers: MarkerData[];
  }

  // Definir iconos SVG inline para evitar problemas de carga de imágenes
  const markerSVGs = {
    headquarters: `
      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="#2563eb">
        <path d="M12 0C7.588 0 4 3.588 4 8c0 6 8 16 8 16s8-10 8-16c0-4.412-3.588-8-8-8zm0 12c-2.206 0-4-1.794-4-4s1.794-4 4-4 4 1.794 4 4-1.794 4-4 4z"/>
      </svg>
    `,
    terminal: `
      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="#dc2626">
        <path d="M12 0C7.588 0 4 3.588 4 8c0 6 8 16 8 16s8-10 8-16c0-4.412-3.588-8-8-8zm0 12c-2.206 0-4-1.794-4-4s1.794-4 4-4 4 1.794 4 4-1.794 4-4 4z"/>
      </svg>
    `,
    office: `
      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="#16a34a">
        <path d="M12 0C7.588 0 4 3.588 4 8c0 6 8 16 8 16s8-10 8-16c0-4.412-3.588-8-8-8zm0 12c-2.206 0-4-1.794-4-4s1.794-4 4-4 4 1.794 4 4-1.794 4-4 4z"/>
      </svg>
    `
  };

  // Crear iconos personalizados usando SVG inline
  const markerIcons: Record<MarkerData['type'], L.DivIcon> = {
    headquarters: L.divIcon({
      html: markerSVGs.headquarters,
      className: 'custom-marker',
      iconSize: [32, 32],
      iconAnchor: [16, 32],
      popupAnchor: [0, -32]
    }),
    terminal: L.divIcon({
      html: markerSVGs.terminal,
      className: 'custom-marker',
      iconSize: [32, 32],
      iconAnchor: [16, 32],
      popupAnchor: [0, -32]
    }),
    office: L.divIcon({
      html: markerSVGs.office,
      className: 'custom-marker',
      iconSize: [32, 32],
      iconAnchor: [16, 32],
      popupAnchor: [0, -32]
    })
  };

  // Colores para los tipos de ubicación
  const typeColors = {
    headquarters: 'bg-blue-100 text-blue-800',
    terminal: 'bg-red-100 text-red-800',
    office: 'bg-green-100 text-green-800'
  };

  function initMap() {
    const mapElement = document.getElementById('map');
    if (!mapElement) return;

    try {
      const mapData = JSON.parse(mapElement.dataset.props || '{}') as MapData;
      
      // Crear el mapa con opciones mejoradas
      const map = L.map('map', {
        center: mapData.center,
        zoom: mapData.zoom,
        zoomControl: true,
        scrollWheelZoom: true,
        dragging: true,
        minZoom: 3,
        maxZoom: 18
      });

      // Añadir capa de mapa con un estilo más moderno
      L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
        attribution: '©OpenStreetMap, ©CartoDB',
        subdomains: 'abcd',
        maxZoom: 19
      }).addTo(map);

      // Añadir marcadores con popups mejorados
      mapData.markers.forEach((marker: MarkerData) => {
        const icon = markerIcons[marker.type];
        
        L.marker(marker.position, { icon })
          .bindPopup(`
            <div class="p-2 text-center">
              <h3 class="font-semibold text-lg mb-1">${marker.title}</h3>
              <span class="px-2 py-1 rounded-full text-sm ${typeColors[marker.type]}">
                ${marker.type.charAt(0).toUpperCase() + marker.type.slice(1)}
              </span>
            </div>
          `, {
            closeButton: false,
            className: 'custom-popup'
          })
          .addTo(map);
      });

      // Ajustar el mapa para mostrar todos los marcadores
      if (mapData.markers.length > 1) {
        const bounds = L.latLngBounds(mapData.markers.map(m => m.position));
        map.fitBounds(bounds, { padding: [50, 50] });
      }

    } catch (error) {
      console.error('Error initializing map:', error);
    }
  }

  // Inicializar el mapa cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMap);
  } else {
    initMap();
  }
</script>

<style>
  /* Estilos para el contenedor del mapa */
  #map {
    background-color: #f8fafc;
  }

  /* Estilos para los marcadores personalizados */
  :global(.custom-marker) {
    background: none;
    border: none;
  }

  :global(.custom-marker svg) {
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
  }

  /* Estilos para los popups */
  :global(.custom-popup .leaflet-popup-content-wrapper) {
    border-radius: 0.75rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  :global(.custom-popup .leaflet-popup-content) {
    margin: 0;
    min-width: 200px;
  }

  :global(.custom-popup .leaflet-popup-tip) {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Estilos para los controles del mapa */
  :global(.leaflet-control-zoom) {
    border: none !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
  }

  :global(.leaflet-control-zoom a) {
    background-color: white !important;
    color: #4a90e2 !important;
    border: 1px solid #e2e8f0 !important;
    width: 30px !important;
    height: 30px !important;
    line-height: 30px !important;
    border-radius: 6px !important;
    margin-bottom: 5px !important;
  }

  :global(.leaflet-control-zoom a:hover) {
    background-color: #f8fafc !important;
    color: #2563eb !important;
  }
</style>